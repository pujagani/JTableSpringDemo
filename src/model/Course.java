package model;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import javax.validation.constraints.NotNull;
import java.sql.*;
import java.util.HashMap;
import java.util.List;

public class Course {
    public int id;
    @NotNull
    public String name;
    public static String dropSQL = "Drop table course If Exists Cascade";
    public static String createSQL = "Create table course (" +
            "  id Integer Generated By Default As Identity(Start With 1) primary key," +
            "  name Varchar(50) Not Null" +
            ");";

    public static HashMap<Integer, String> retrieveAll(JdbcTemplate jdbcTemplate) {
        HashMap<Integer, String> rslt = new HashMap<Integer, String>();
        String sql = "Select id, name From course";
        List<Course> courses = jdbcTemplate.query(sql, new RowMaper());
        for (Course course : courses) {
            rslt.put(course.id, course.name);
        }
        return rslt;
    }

    public static JTableResult retrievePage(JdbcTemplate jdbcTemplate, JTableRequest jTableRequest) {
        String orderBy = "name";
        if (jTableRequest.jtSorting != null) orderBy = jTableRequest.jtSorting;
        String sql = "Select id, name From course Order By " + orderBy + " Offset " + jTableRequest.jtStartIndex + " Limit " + jTableRequest.jtPageSize;
        List<Course> courses = jdbcTemplate.query(sql, new RowMaper());

        JTableResult rslt = new JTableResult();
        rslt.Result = "OK";
        rslt.Records = courses;
        rslt.TotalRecordCount = jdbcTemplate.queryForObject("Select count(*) From course", Integer.class);

        return rslt;
    }

    public static Course retrieveById(JdbcTemplate jdbcTemplate, int id) {
        String sql = "Select id, name From course" +
                " Where id = ?";
        Course course = jdbcTemplate.queryForObject(sql, new Object[]{id}, new Course.RowMaper());
        return course;
    }

    public static class RowMaper implements RowMapper<Course> {
        public Course mapRow(ResultSet rs, int rowNum) throws SQLException {
            Course course = new Course();
            course.id = rs.getInt(1);
            course.name = rs.getString(2);
            return course;
        }
    }

    public void insert(JdbcTemplate jdbcTemplate) {
        String sql = "Insert into course(name) Values(?)";
        PreparedStatementCreator psc = new PreparedStatementCreator() {
            public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, name);
                return ps;
            }
        };
        KeyHolder holder = new GeneratedKeyHolder();
        jdbcTemplate.update(psc, holder);
        id = holder.getKey().intValue();
    }

    public void update(JdbcTemplate jdbcTemplate) {
        String sql = "Update course Set name = ?" +
                " Where id = ?";
        jdbcTemplate.update(sql, name, id);
    }

    public static void delete(JdbcTemplate jdbcTemplate, int id) {
        String sql = "Delete From course Where id = ?";
        jdbcTemplate.update(sql, id);
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
