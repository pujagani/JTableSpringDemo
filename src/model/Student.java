package model;

import com.fasterxml.jackson.databind.annotation.*;
import controller.*;
import org.hibernate.validator.constraints.*;
import org.springframework.format.annotation.*;
import org.springframework.jdbc.core.*;
import org.springframework.jdbc.support.*;

import javax.validation.constraints.*;
import java.sql.*;
import java.util.Date;
import java.util.*;

public class Student {
    public static String dropSQL = "Drop table student If Exists Cascade";
    public static String createSQL = "Create table student (" +
            "  id Integer Generated By Default As Identity(Start With 1) primary key," +
            "  name Varchar(50) Not Null," +
            "  email Varchar(50)," +
            "  password Varchar(50) Not Null," +
            "  gender Varchar(1) Not Null," +
            "  city_id Integer Not Null," +
            "  birth_date Date," +
            "  education Integer Not Null," +
            "  about Varchar(250)," +
            "  active_flg Varchar(1) Not Null," +
            "  record_date Date" +
            ");";
    public static String alterSQL = "Alter table student Add Constraint student_city_fk Foreign Key (city_id) References city (id)";
    public int id;
    @NotNull
    @Size(min = 2, max = 30)
    public String name;
    @NotNull
    @Email
    public String email;
    @NotNull
    public String password;
    @NotNull
    public String gender;
    @NotNull
    public int city_id;
    @NotNull
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    public Date birth_date;
    @NotNull
    public int education;
    public String about;
    @NotNull
    public String active_flg;
    @DateTimeFormat(pattern = BaseController.DATE_FORMAT)
    @JsonSerialize(using = JsonDateSerializer.class)
    public Date record_date;

    public static JTableResult retrievePage(JdbcTemplate jdbcTemplate, JTableRequest jTableRequest) {
        String orderBy = "name";
        if (jTableRequest.jtSorting != null) orderBy = jTableRequest.jtSorting;
        String sql = "Select id, name, email, password, gender, city_id, birth_date, education, about, active_flg, record_date From student Order By " + orderBy + " Offset " + jTableRequest.jtStartIndex + " Limit " + jTableRequest.jtPageSize;
        List<Student> rows = jdbcTemplate.query(sql, new Student.RowMaper());

        JTableResult rslt = new JTableResult();
        rslt.Result = "OK";
        rslt.Records = rows;
        rslt.TotalRecordCount = jdbcTemplate.queryForObject("Select count(*) From student", Integer.class);

        return rslt;
    }

    public static Student retrieveById(JdbcTemplate jdbcTemplate, int id) {
        String sql = "Select id, name, email, password, gender, city_id, birth_date, education, about, active_flg, record_date From student" +
                " Where id = ?";
        Student student = jdbcTemplate.queryForObject(sql, new Object[]{id}, new Student.RowMaper());
        return student;
    }

    public static void delete(JdbcTemplate jdbcTemplate, int id) {
        String sql = "Delete From student Where id = ?";
        jdbcTemplate.update(sql, id);
    }

    public void insert(JdbcTemplate jdbcTemplate) {
        String sql = "Insert into student(name, email, password, gender, city_id, birth_date, education, about, active_flg, record_date)" +
                " Values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        //jdbcTemplate.update(sql, name, email, password, gender, city_id, birth_date, education, about, active_flg, record_date);
        if (record_date == null) record_date = new Date();
        PreparedStatementCreator psc = new PreparedStatementCreator() {
            public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, name);
                ps.setString(2, email);
                ps.setString(3, password);
                ps.setString(4, gender);
                ps.setInt(5, city_id);
                ps.setDate(6, new java.sql.Date(birth_date.getTime()));
                ps.setInt(7, education);
                ps.setString(8, about);
                ps.setString(9, active_flg);
                ps.setDate(10, new java.sql.Date(record_date.getTime()));
                return ps;
            }
        };
        KeyHolder holder = new GeneratedKeyHolder();
        jdbcTemplate.update(psc, holder);
        id = holder.getKey().intValue();
    }

    public void update(JdbcTemplate jdbcTemplate) {
        String sql = "Update student Set name = ?, email = ?, password = ?, gender = ?, city_id = ?, birth_date = ?, education = ?, about = ?, active_flg = ?" +
                " Where id = ?";
        jdbcTemplate.update(sql, name, email, password, gender, city_id, birth_date, education, about, active_flg, id);
    }

    public static class RowMaper implements RowMapper<Student> {
        public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
            Student Student = new Student();
            Student.id = rs.getInt(1);
            Student.name = rs.getString(2);
            Student.email = rs.getString(3);
            Student.password = rs.getString(4);
            Student.gender = rs.getString(5);
            Student.city_id = rs.getInt(6);
            Student.birth_date = rs.getDate(7);
            Student.education = rs.getInt(8);
            Student.about = rs.getString(9);
            Student.active_flg = rs.getString(10);
            Student.record_date = rs.getDate(11);
            return Student;
        }
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public int getCity_id() {
        return city_id;
    }

    public void setCity_id(int city_id) {
        this.city_id = city_id;
    }

    public Date getBirth_date() {
        return birth_date;
    }

    public void setBirth_date(Date birth_date) {
        this.birth_date = birth_date;
    }

    public int getEducation() {
        return education;
    }

    public void setEducation(int education) {
        this.education = education;
    }

    public String getAbout() {
        return about;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public String getActive_flg() {
        return active_flg;
    }

    public void setActive_flg(String active_flg) {
        this.active_flg = active_flg;
    }

    public Date getRecord_date() {
        return record_date;
    }

    public void setRecord_date(Date record_date) {
        this.record_date = record_date;
    }
}
